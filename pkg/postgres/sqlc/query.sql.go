// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserEmailExists = `-- name: CheckUserEmailExists :one
SELECT EXISTS (
  SELECT 1 FROM "User" WHERE email = $1
) AS email_exists
`

func (q *Queries) CheckUserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserEmailExists, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
  SELECT 1 FROM "User" WHERE id = $1
) AS user_exists
`

func (q *Queries) CheckUserExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, id)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}

const createBankAccount = `-- name: CreateBankAccount :one

INSERT INTO "BankAccount" (user_id, account_number, bank_name)
VALUES ($1, $2, $3)
RETURNING id, user_id, account_number, bank_name, created_time, updated_time
`

type CreateBankAccountParams struct {
	UserID        int64          `json:"user_id"`
	AccountNumber pgtype.Numeric `json:"account_number"`
	BankName      pgtype.Text    `json:"bank_name"`
}

// Table: BankAccount
func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRow(ctx, createBankAccount, arg.UserID, arg.AccountNumber, arg.BankName)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountNumber,
		&i.BankName,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const createCreditCard = `-- name: CreateCreditCard :one

INSERT INTO "CreditCard" (user_id, card_number, cardholder_name, expiration_date)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, card_number, cardholder_name, expiration_date, created_time, updated_time
`

type CreateCreditCardParams struct {
	UserID         int64          `json:"user_id"`
	CardNumber     pgtype.Numeric `json:"card_number"`
	CardholderName pgtype.Text    `json:"cardholder_name"`
	ExpirationDate pgtype.Date    `json:"expiration_date"`
}

// Table: CreditCard
func (q *Queries) CreateCreditCard(ctx context.Context, arg CreateCreditCardParams) (CreditCard, error) {
	row := q.db.QueryRow(ctx, createCreditCard,
		arg.UserID,
		arg.CardNumber,
		arg.CardholderName,
		arg.ExpirationDate,
	)
	var i CreditCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CardNumber,
		&i.CardholderName,
		&i.ExpirationDate,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const createRecord = `-- name: CreateRecord :one

INSERT INTO "Record" (user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time
`

type CreateRecordParams struct {
	UserID          int64            `json:"user_id"`
	Amount          pgtype.Numeric   `json:"amount"`
	TransactionDate pgtype.Date      `json:"transaction_date"`
	BankAccountID   pgtype.Int8      `json:"bank_account_id"`
	CreditCardID    pgtype.Int8      `json:"credit_card_id"`
	RecordType      EnumRecordType   `json:"record_type"`
	RecordSource    EnumRecordSource `json:"record_source"`
	Description     pgtype.Text      `json:"description"`
}

// Table: Record
func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, createRecord,
		arg.UserID,
		arg.Amount,
		arg.TransactionDate,
		arg.BankAccountID,
		arg.CreditCardID,
		arg.RecordType,
		arg.RecordSource,
		arg.Description,
	)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionDate,
		&i.BankAccountID,
		&i.CreditCardID,
		&i.RecordType,
		&i.RecordSource,
		&i.Description,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO "User" (username, email)
VALUES ($1, $2)
RETURNING id, username, email, phone_number, password, created_time, updated_time
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

// Table: User
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM "BankAccount" WHERE id = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBankAccount, id)
	return err
}

const deleteCreditCard = `-- name: DeleteCreditCard :exec
DELETE FROM "CreditCard" WHERE id = $1
`

func (q *Queries) DeleteCreditCard(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCreditCard, id)
	return err
}

const deleteRecord = `-- name: DeleteRecord :exec
DELETE FROM "Record" WHERE id = $1
`

func (q *Queries) DeleteRecord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRecord, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getBankAccountById = `-- name: GetBankAccountById :one
SELECT id, user_id, account_number, bank_name, created_time, updated_time FROM "BankAccount" WHERE id = $1
`

func (q *Queries) GetBankAccountById(ctx context.Context, id int64) (BankAccount, error) {
	row := q.db.QueryRow(ctx, getBankAccountById, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountNumber,
		&i.BankName,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getCreditCardById = `-- name: GetCreditCardById :one
SELECT id, user_id, card_number, cardholder_name, expiration_date, created_time, updated_time FROM "CreditCard" WHERE id = $1
`

func (q *Queries) GetCreditCardById(ctx context.Context, id int64) (CreditCard, error) {
	row := q.db.QueryRow(ctx, getCreditCardById, id)
	var i CreditCard
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CardNumber,
		&i.CardholderName,
		&i.ExpirationDate,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getRecordById = `-- name: GetRecordById :one
SELECT id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time FROM "Record" WHERE id = $1
`

func (q *Queries) GetRecordById(ctx context.Context, id int64) (Record, error) {
	row := q.db.QueryRow(ctx, getRecordById, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionDate,
		&i.BankAccountID,
		&i.CreditCardID,
		&i.RecordType,
		&i.RecordSource,
		&i.Description,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getRecordsByBankAccountAndDate = `-- name: GetRecordsByBankAccountAndDate :many
SELECT id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time FROM "Record"
WHERE bank_account_id = $1
  AND transaction_date BETWEEN $2 AND $3
`

type GetRecordsByBankAccountAndDateParams struct {
	BankAccountID     pgtype.Int8 `json:"bank_account_id"`
	TransactionDate   pgtype.Date `json:"transaction_date"`
	TransactionDate_2 pgtype.Date `json:"transaction_date_2"`
}

func (q *Queries) GetRecordsByBankAccountAndDate(ctx context.Context, arg GetRecordsByBankAccountAndDateParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, getRecordsByBankAccountAndDate, arg.BankAccountID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.TransactionDate,
			&i.BankAccountID,
			&i.CreditCardID,
			&i.RecordType,
			&i.RecordSource,
			&i.Description,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsByCreditCardAndDate = `-- name: GetRecordsByCreditCardAndDate :many
SELECT id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time FROM "Record"
WHERE credit_card_id = $1
  AND transaction_date BETWEEN $2 AND $3
`

type GetRecordsByCreditCardAndDateParams struct {
	CreditCardID      pgtype.Int8 `json:"credit_card_id"`
	TransactionDate   pgtype.Date `json:"transaction_date"`
	TransactionDate_2 pgtype.Date `json:"transaction_date_2"`
}

func (q *Queries) GetRecordsByCreditCardAndDate(ctx context.Context, arg GetRecordsByCreditCardAndDateParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, getRecordsByCreditCardAndDate, arg.CreditCardID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.TransactionDate,
			&i.BankAccountID,
			&i.CreditCardID,
			&i.RecordType,
			&i.RecordSource,
			&i.Description,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsByUserAndDate = `-- name: GetRecordsByUserAndDate :many
SELECT id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time FROM "Record"
WHERE user_id = $1
    AND transaction_date BETWEEN $2 AND $3
`

type GetRecordsByUserAndDateParams struct {
	UserID            int64       `json:"user_id"`
	TransactionDate   pgtype.Date `json:"transaction_date"`
	TransactionDate_2 pgtype.Date `json:"transaction_date_2"`
}

func (q *Queries) GetRecordsByUserAndDate(ctx context.Context, arg GetRecordsByUserAndDateParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, getRecordsByUserAndDate, arg.UserID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.TransactionDate,
			&i.BankAccountID,
			&i.CreditCardID,
			&i.RecordType,
			&i.RecordSource,
			&i.Description,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, phone_number, password, created_time, updated_time FROM "User" WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const listBankAccounts = `-- name: ListBankAccounts :many
SELECT id, user_id, account_number, bank_name, created_time, updated_time FROM "BankAccount" ORDER BY created_time
`

func (q *Queries) ListBankAccounts(ctx context.Context) ([]BankAccount, error) {
	rows, err := q.db.Query(ctx, listBankAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountNumber,
			&i.BankName,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCreditCards = `-- name: ListCreditCards :many
SELECT id, user_id, card_number, cardholder_name, expiration_date, created_time, updated_time FROM "CreditCard" ORDER BY created_time
`

func (q *Queries) ListCreditCards(ctx context.Context) ([]CreditCard, error) {
	rows, err := q.db.Query(ctx, listCreditCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreditCard
	for rows.Next() {
		var i CreditCard
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CardNumber,
			&i.CardholderName,
			&i.ExpirationDate,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecords = `-- name: ListRecords :many
SELECT id, user_id, amount, transaction_date, bank_account_id, credit_card_id, record_type, record_source, description, created_time, updated_time FROM "Record" ORDER BY created_time
`

func (q *Queries) ListRecords(ctx context.Context) ([]Record, error) {
	rows, err := q.db.Query(ctx, listRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.TransactionDate,
			&i.BankAccountID,
			&i.CreditCardID,
			&i.RecordType,
			&i.RecordSource,
			&i.Description,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, phone_number, password, created_time, updated_time FROM "User" ORDER BY created_time
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBankAccount = `-- name: UpdateBankAccount :exec
UPDATE "BankAccount" SET account_number = $2, bank_name = $3, updated_time = NOW() WHERE id = $1
`

type UpdateBankAccountParams struct {
	ID            int64          `json:"id"`
	AccountNumber pgtype.Numeric `json:"account_number"`
	BankName      pgtype.Text    `json:"bank_name"`
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) error {
	_, err := q.db.Exec(ctx, updateBankAccount, arg.ID, arg.AccountNumber, arg.BankName)
	return err
}

const updateCreditCard = `-- name: UpdateCreditCard :exec
UPDATE "CreditCard" SET card_number = $2, cardholder_name = $3, expiration_date = $4, updated_time = NOW() WHERE id = $1
`

type UpdateCreditCardParams struct {
	ID             int64          `json:"id"`
	CardNumber     pgtype.Numeric `json:"card_number"`
	CardholderName pgtype.Text    `json:"cardholder_name"`
	ExpirationDate pgtype.Date    `json:"expiration_date"`
}

func (q *Queries) UpdateCreditCard(ctx context.Context, arg UpdateCreditCardParams) error {
	_, err := q.db.Exec(ctx, updateCreditCard,
		arg.ID,
		arg.CardNumber,
		arg.CardholderName,
		arg.ExpirationDate,
	)
	return err
}

const updateRecord = `-- name: UpdateRecord :exec
UPDATE "Record" SET amount = $2, transaction_date = $3, bank_account_id = $4, credit_card_id = $5, record_type = $6, record_source = $7, description = $8, updated_time = NOW() WHERE id = $1
`

type UpdateRecordParams struct {
	ID              int64            `json:"id"`
	Amount          pgtype.Numeric   `json:"amount"`
	TransactionDate pgtype.Date      `json:"transaction_date"`
	BankAccountID   pgtype.Int8      `json:"bank_account_id"`
	CreditCardID    pgtype.Int8      `json:"credit_card_id"`
	RecordType      EnumRecordType   `json:"record_type"`
	RecordSource    EnumRecordSource `json:"record_source"`
	Description     pgtype.Text      `json:"description"`
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) error {
	_, err := q.db.Exec(ctx, updateRecord,
		arg.ID,
		arg.Amount,
		arg.TransactionDate,
		arg.BankAccountID,
		arg.CreditCardID,
		arg.RecordType,
		arg.RecordSource,
		arg.Description,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE "User" SET email = $2, updated_time = NOW() WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}
