// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EnumRecordSource string

const (
	EnumRecordSourceCash        EnumRecordSource = "cash"
	EnumRecordSourceCreditCard  EnumRecordSource = "credit_card"
	EnumRecordSourceBankAccount EnumRecordSource = "bank_account"
)

func (e *EnumRecordSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumRecordSource(s)
	case string:
		*e = EnumRecordSource(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumRecordSource: %T", src)
	}
	return nil
}

type NullEnumRecordSource struct {
	EnumRecordSource EnumRecordSource `json:"enum_record_source"`
	Valid            bool             `json:"valid"` // Valid is true if EnumRecordSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumRecordSource) Scan(value interface{}) error {
	if value == nil {
		ns.EnumRecordSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumRecordSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumRecordSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumRecordSource), nil
}

func (e EnumRecordSource) Valid() bool {
	switch e {
	case EnumRecordSourceCash,
		EnumRecordSourceCreditCard,
		EnumRecordSourceBankAccount:
		return true
	}
	return false
}

func AllEnumRecordSourceValues() []EnumRecordSource {
	return []EnumRecordSource{
		EnumRecordSourceCash,
		EnumRecordSourceCreditCard,
		EnumRecordSourceBankAccount,
	}
}

type EnumRecordType string

const (
	EnumRecordTypeIncome  EnumRecordType = "income"
	EnumRecordTypeExpense EnumRecordType = "expense"
)

func (e *EnumRecordType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumRecordType(s)
	case string:
		*e = EnumRecordType(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumRecordType: %T", src)
	}
	return nil
}

type NullEnumRecordType struct {
	EnumRecordType EnumRecordType `json:"enum_record_type"`
	Valid          bool           `json:"valid"` // Valid is true if EnumRecordType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumRecordType) Scan(value interface{}) error {
	if value == nil {
		ns.EnumRecordType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumRecordType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumRecordType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumRecordType), nil
}

func (e EnumRecordType) Valid() bool {
	switch e {
	case EnumRecordTypeIncome,
		EnumRecordTypeExpense:
		return true
	}
	return false
}

func AllEnumRecordTypeValues() []EnumRecordType {
	return []EnumRecordType{
		EnumRecordTypeIncome,
		EnumRecordTypeExpense,
	}
}

type BankAccount struct {
	ID            int64              `json:"id"`
	UserID        int64              `json:"user_id"`
	AccountNumber pgtype.Numeric     `json:"account_number"`
	BankName      pgtype.Text        `json:"bank_name"`
	CreatedTime   pgtype.Timestamptz `json:"created_time"`
	UpdatedTime   pgtype.Timestamptz `json:"updated_time"`
}

type CreditCard struct {
	ID             int64              `json:"id"`
	UserID         int64              `json:"user_id"`
	CardNumber     pgtype.Numeric     `json:"card_number"`
	CardholderName pgtype.Text        `json:"cardholder_name"`
	ExpirationDate pgtype.Date        `json:"expiration_date"`
	CreatedTime    pgtype.Timestamptz `json:"created_time"`
	UpdatedTime    pgtype.Timestamptz `json:"updated_time"`
}

type Record struct {
	ID              int64              `json:"id"`
	UserID          int64              `json:"user_id"`
	Amount          pgtype.Numeric     `json:"amount"`
	TransactionDate pgtype.Date        `json:"transaction_date"`
	BankAccountID   pgtype.Int8        `json:"bank_account_id"`
	CreditCardID    pgtype.Int8        `json:"credit_card_id"`
	RecordType      EnumRecordType     `json:"record_type"`
	RecordSource    EnumRecordSource   `json:"record_source"`
	Description     pgtype.Text        `json:"description"`
	CreatedTime     pgtype.Timestamptz `json:"created_time"`
	UpdatedTime     pgtype.Timestamptz `json:"updated_time"`
}

type User struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       pgtype.Text        `json:"email"`
	PhoneNumber pgtype.Numeric     `json:"phone_number"`
	Password    pgtype.Text        `json:"password"`
	CreatedTime pgtype.Timestamptz `json:"created_time"`
	UpdatedTime pgtype.Timestamptz `json:"updated_time"`
}
